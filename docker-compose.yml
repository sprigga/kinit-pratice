version: "3.9"

services:
  api:
    profiles: ["api"]
    container_name: ${PROJECT_PREFIX}-api
    restart: always
    build:
      context: ./
      dockerfile: ./docker_env/kinit-api/Dockerfile
    ports:
      - "${API_PORT}:${API_EXPOSE_PORT}"
    expose:
      - "${API_EXPOSE_PORT}"
    environment:
      TZ: ${TIMEZONE}
    volumes:
      - ./api:/app
    networks:
      ${PROJECT_PREFIX}_network:
        ipv4_address: ${API_IP}

  admin:
    profiles: ["admin"]
    container_name: ${PROJECT_PREFIX}-admin
    restart: always
    image: nginx:latest
    ports:
      - "${ADMIN_PORT}:80"
    expose:
      - "80"
    environment:
      TZ: ${TIMEZONE}
    volumes:
      - ./docker_env/kinit-admin/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./:/usr/share/nginx/html
    networks:
      ${PROJECT_PREFIX}_network:
        ipv4_address: ${ADMIN_IP}

  task:
    profiles: ["task"]
    container_name: ${PROJECT_PREFIX}-task
    restart: always
    build:
      context: ./
      dockerfile: ./docker_env/kinit-task/Dockerfile
    environment:
      TZ: ${TIMEZONE}
    volumes:
      - ./mes-task:/app
    networks:
      ${PROJECT_PREFIX}_network:
        ipv4_address: ${TASK_IP}

  redis:
    profiles: ["redis"]
    container_name: ${PROJECT_PREFIX}-redis
    restart: always
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_EXPOSE_PORT}"
    expose:
      - "${REDIS_EXPOSE_PORT}"
    volumes:
      - ./docker_env/redis/conf/redis.conf:/etc/redis/redis.conf
    environment:
      TZ: ${TIMEZONE}
    networks:
      ${PROJECT_PREFIX}_network:
        ipv4_address: ${REDIS_IP}
    command: redis-server /etc/redis/redis.conf

  mongo:
    profiles: ["mongo"]
    container_name: ${PROJECT_PREFIX}-mongo
    restart: always
    image: mongo:latest
    ports:
      - "${MONGO_PORT}:${MONGO_EXPOSE_PORT}"
    expose:
      - "${MONGO_EXPOSE_PORT}"
    volumes:
      - ./docker_env/mongo/data:/data/db
      - ./docker_env/mongo/log:/data/log
      - ./docker_env/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
      TZ: ${TIMEZONE}
    networks:
      ${PROJECT_PREFIX}_network:
        ipv4_address: ${MONGO_IP}
    command: mongod --auth --bind_ip 0.0.0.0

  mysql:
    profiles: ["mysql"]
    container_name: ${PROJECT_PREFIX}-mysql
    restart: always
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "${MYSQL_PORT}:${MYSQL_INTERNAL_PORT}"
    expose:
      - "${MYSQL_INTERNAL_PORT}"
    volumes:
      - ./docker_env/mysql/conf:/etc/mysql/conf.d
      - ./docker_env/mysql/data:/var/lib/mysql
      - ./docker_env/mysql/logs:/logs
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS}
      MYSQL_DATABASE: ${MYSQL_DB}
      TZ: ${TIMEZONE}
    networks:
      ${PROJECT_PREFIX}_network:
        ipv4_address: ${MYSQL_IP}

  mqtt:
    profiles: ["mqtt"]
    container_name: ${PROJECT_PREFIX}-mqtt
    image: emqx:latest
    restart: always
    environment:
      TZ: ${TIMEZONE}
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx_ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    ports:
      - "${MQTT_PORT_1883}:1883"
      - "${MQTT_PORT_8083}:8083"
      - "${MQTT_PORT_8084}:8084"
      - "${MQTT_PORT_8883}:8883"
      - "${MQTT_PORT_18083}:18083"
    volumes:
      - ./docker_env/logs:/opt/emqx/log
      - ./docker_env/data:/opt/emqx/data
    networks:
      ${PROJECT_PREFIX}_network:
        ipv4_address: ${MQTT_IP}

networks:
  ${PROJECT_PREFIX}_network:
    driver: bridge
    ipam:
      config:
        - subnet: "${PROJECT_SUBNET}"
          gateway: "${PROJECT_GATEWAY}"