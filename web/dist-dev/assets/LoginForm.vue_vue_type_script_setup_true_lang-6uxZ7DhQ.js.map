{"version":3,"file":"LoginForm.vue_vue_type_script_setup_true_lang-6uxZ7DhQ.js","sources":["../../src/views/Login/components/LoginForm.vue"],"sourcesContent":["<script setup lang=\"tsx\">\nimport { reactive, ref, watch } from 'vue'\nimport { Form } from '@/components/Form'\nimport { useI18n } from '@/hooks/web/useI18n'\nimport { ElCheckbox, ElLink } from 'element-plus'\nimport { useForm } from '@/hooks/web/useForm'\nimport { getRoleMenusApi } from '@/api/login'\nimport { useAuthStore } from '@/store/modules/auth'\nimport { usePermissionStore } from '@/store/modules/permission'\nimport { useRouter } from 'vue-router'\nimport type { RouteLocationNormalizedLoaded, RouteRecordRaw } from 'vue-router'\nimport { UserLoginType } from '@/api/login/types'\nimport { useValidator } from '@/hooks/web/useValidator'\nimport { FormSchema } from '@/components/Form'\nimport { Icon } from '@/components/Icon'\nimport { BaseButton } from '@/components/Button'\n\nconst emit = defineEmits(['to-telephone'])\n\nconst { required } = useValidator()\n\nconst permissionStore = usePermissionStore()\n\nconst authStore = useAuthStore()\n\nconst { currentRoute, addRoute, push } = useRouter()\n\nconst { t } = useI18n()\n\nconst remember = ref(false)\nconst hoverColor = 'var(--el-color-primary)'\n\nconst rules = {\n  telephone: [required()],\n  method: [required()],\n  password: [required()]\n}\n\nconst schema = reactive<FormSchema[]>([\n  {\n    field: 'title',\n    colProps: {\n      span: 24\n    },\n    formItemProps: {\n      slots: {\n        default: () => {\n          return <h2 class=\"text-2xl font-bold text-center w-[100%]\">{t('login.login')}</h2>\n        }\n      }\n    }\n  },\n  {\n    field: 'telephone',\n    label: t('login.telephone'),\n    value: '',\n    component: 'Input',\n    colProps: {\n      span: 24\n    },\n    componentProps: {\n      style: {\n        width: '100%'\n      },\n      placeholder: t('login.telephonePlaceholder'),\n      maxlength: 11\n    }\n  },\n  {\n    field: 'password',\n    label: t('login.password'),\n    value: '',\n    component: 'InputPassword',\n    colProps: {\n      span: 24\n    },\n    componentProps: {\n      style: {\n        width: '100%'\n      },\n      placeholder: t('login.passwordPlaceholder')\n    }\n  },\n  {\n    field: 'method',\n    label: '登錄類型',\n    value: '0',\n    component: 'Input',\n    hidden: true\n  },\n  {\n    field: 'login',\n    colProps: {\n      span: 24\n    },\n    formItemProps: {\n      slots: {\n        default: () => {\n          return (\n            <>\n              <div class=\"w-[100%]\">\n                <BaseButton\n                  loading={loading.value}\n                  type=\"primary\"\n                  class=\"w-[100%]\"\n                  onClick={signIn}\n                >\n                  {t('login.login')}\n                </BaseButton>\n              </div>\n            </>\n          )\n        }\n      }\n    }\n  }\n])\n\nconst iconSize = 30\nconst { formRegister, formMethods } = useForm()\nconst { getFormData, getElFormExpose } = formMethods\nconst loading = ref(false)\nconst iconColor = '#999'\nconst redirect = ref<string>('')\n\nwatch(\n  () => currentRoute.value,\n  (route: RouteLocationNormalizedLoaded) => {\n    redirect.value = route?.query?.redirect as string\n  },\n  {\n    immediate: true\n  }\n)\n\n// 登錄\nconst signIn = async () => {\n  const elForm = await getElFormExpose()\n  const valid = await elForm?.validate()\n  if (valid) {\n    loading.value = true\n    const formData: UserLoginType = await getFormData()\n    try {\n      const res = await authStore.login(formData)\n      if (res) {\n        if (!res.data.is_reset_password) {\n          // 重置密碼\n          push({ path: '/reset/password' })\n        } else {\n          // 獲取動態路由\n          getMenu()\n        }\n      } else {\n        loading.value = false\n      }\n    } catch (e: any) {\n      loading.value = false\n    }\n  }\n}\n\n// 獲取用户選單信息\nconst getMenu = async () => {\n  const res = await getRoleMenusApi()\n  if (res) {\n    const routers = res.data || []\n    await permissionStore.generateRoutes(routers).catch(() => {})\n    permissionStore.getAddRouters.forEach((route) => {\n      addRoute(route as RouteRecordRaw) // 動態添加可訪問路由表\n    })\n    permissionStore.setIsAddRouters(true)\n    push({ path: redirect.value || permissionStore.addRouters[0].path })\n  }\n}\n\n// 手機驗證碼登錄\nconst toTelephoneLogin = () => {\n  emit('to-telephone')\n}\n</script>\n\n<template>\n  <Form\n    :schema=\"schema\"\n    :rules=\"rules\"\n    label-position=\"top\"\n    hide-required-asterisk\n    size=\"large\"\n    class=\"dark:border-1 dark:border-[var(--el-border-color)] dark:border-solid\"\n    @register=\"formRegister\"\n  />\n</template>\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","required","useValidator","permissionStore","usePermissionStore","authStore","useAuthStore","currentRoute","addRoute","push","useRouter","t","useI18n","ref","rules","telephone","method","password","schema","reactive","field","colProps","span","formItemProps","slots","default","_createVNode","label","value","component","componentProps","style","width","placeholder","maxlength","hidden","_slot","_Fragment","BaseButton","loading","signIn","formRegister","formMethods","useForm","getFormData","getElFormExpose","redirect","watch","route","query","immediate","__async","elForm","validate","formData","res","login","data","is_reset_password","getMenu","path","e","getRoleMenusApi","routers","generateRoutes","catch","getAddRouters","forEach","setIsAddRouters","addRouters"],"mappings":"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"}